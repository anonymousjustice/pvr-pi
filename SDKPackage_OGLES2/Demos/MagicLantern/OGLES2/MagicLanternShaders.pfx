////////////////////////////////////////////////////////////////////////////////////
// MagicLantern PFX file.
// 
// This file contains two shaders sets.
// The first one transform and light the vertices using a coloured point 
// light with diffuse and specular components. It also projects a cubemap
// texture containing the light-map which is blended (modulation) with the base 
// texture.
// The second set is just to draw the cubemap on the sphere with a diffuse colour.
////////////////////////////////////////////////////////////////////////////////////

[HEADER]	
	VERSION		00.00.00.00	
	DESCRIPTION MagicLantern: Dynamic Lighting example. 	
	COPYRIGHT	Imagination Technologies Ltd.	
[/HEADER]

// Texture description
// For cubemap always use clamp to edge to avoid wrapping artefacts
// that might show the seams of the textures. 
[TEXTURE]
	NAME			lantern
	PATH			LanternCubemap.pvr
	MINIFICATION	LINEAR
	MAGNIFICATION	LINEAR
	MIPMAP			NEAREST
	WRAP_S			CLAMP
	WRAP_T			CLAMP
[/TEXTURE]
[TEXTURE]
	NAME			floor
	PATH			Floor.pvr
	MINIFICATION	LINEAR
	MAGNIFICATION	LINEAR
	MIPMAP			NEAREST
	WRAP_S			REPEAT
	WRAP_T			REPEAT
[/TEXTURE]
[TEXTURE]
	NAME			marble
	PATH			Marble.pvr
	MINIFICATION	LINEAR
	MAGNIFICATION	LINEAR
	MIPMAP			NEAREST
	WRAP_S			REPEAT
	WRAP_T			REPEAT
[/TEXTURE]
	
// Projected light-map vertex shader
[VERTEXSHADER]
	NAME myProjectionVSh
	[GLSL_CODE]
		attribute highp   vec3  inVertex;
		attribute mediump vec3  inNormal;
		attribute mediump vec2  inTexCoord;

		uniform highp mat4  MVPMatrix;
		uniform highp mat3  ModelIT;
		uniform highp vec3  LightPosition;
		uniform highp vec3 	LightColor;

		varying mediump vec4  DiffuseLight;
		varying mediump vec4  SpecularLight;
		varying mediump vec2  TexCoord;
		varying mediump vec3  ReflectDir;

		const highp float  cShininess = 32.0;


		void main()
		{
			// LIGHTING
			// This demo uses point light with specular using a  
			// simplified algorithm without half-vector.
			// For a complete implementation of point light, please, 
			// check our ComplexLighting training course.	
			
			// Get the direction vector from the position of the light
			// to the vertex (it has to be normalised for the dot product to work).
			highp vec3 lightDir = -normalize(inVertex - LightPosition);

			// Calculate smooth-shading as the cosine between the light angle 
			// and the normal at that vertex (i.e. dot product)
			// The clamping will give us 1.0 (full light) when the normal and the 
			// light direction coincide and 0.0 when they are at 90 degrees	
			highp float Intensity = max(dot(inNormal, lightDir), 0.0);	
			
			// Calculate now the specular component
			SpecularLight = pow(Intensity, cShininess) * vec4(LightColor,1.0);
			DiffuseLight = Intensity * vec4(LightColor,1.0);	
				
			// The direction from the light position to the vertex is transformed
			// with the inverse-transpose of the same matrix used to transform
			// the sphere. The resulting vector will be used to map into the
			// cubemap texture with our lightmap.
			ReflectDir =  lightDir * ModelIT;

			// Transform position
			gl_Position = MVPMatrix * vec4(inVertex, 1.0);
			
			// Pass through texcoords
			TexCoord = inTexCoord;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

// Projected light-map fragment shader
[FRAGMENTSHADER]
	NAME myProjectionFSh
	[GLSL_CODE]
		

		uniform sampler2D  sTexture;
		uniform samplerCube sLightMap;
		
		varying mediump vec3  ReflectDir;
		varying mediump vec2  TexCoord;
		
		varying lowp    vec4  DiffuseLight;
		varying lowp    vec4  SpecularLight;

		void main()
		{
			// Get the lightmap colour
			lowp vec4 lightMap = (textureCube(sLightMap, ReflectDir));

			// Compose the final colour modulating the base texture with the lightmap and multiplying by the diffuse colour.
			// The specular component is added at the end.
			gl_FragColor = texture2D(sTexture,TexCoord)*lightMap * DiffuseLight + SpecularLight;
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

// Simple textured sphere vertex shader
[VERTEXSHADER]
	NAME 		SphereVertexShader

	// LOAD GLSL AS CODE
	[GLSL_CODE]
		attribute highp   vec3  inVertex;
		attribute mediump vec3  inNormal;
		uniform highp   mat4  MVPMatrix;
		varying mediump vec3   ReflectDir;

		void main()
		{
			// Transfotm position
			gl_Position = MVPMatrix * vec4(inVertex, 1.0);

			// Pass the inverse of the normal (to map into the cubamap)
			ReflectDir = -inNormal;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

// Simple textured sphere fragment shader
[FRAGMENTSHADER] 
	NAME 		SphereFragmentShader 

	// LOAD GLSL AS CODE
	[GLSL_CODE]
		uniform samplerCube sLightMap;
		uniform lowp  vec3  LightColor;
		varying mediump vec3 ReflectDir;

		void main()
		{
			// Final colour is the modulaion of the base texture with the diffuse colour.
			gl_FragColor = (textureCube(sLightMap, ReflectDir)) * vec4(LightColor, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT]
	NAME MarbleProjection

	ATTRIBUTE 	inVertex	POSITION
	ATTRIBUTE	inNormal	NORMAL
	ATTRIBUTE	inTexCoord	UV
	
	UNIFORM MVPMatrix WORLDVIEWPROJECTION
	UNIFORM ModelIT WORLDIT
	UNIFORM LightPosition LIGHTPOSWORLD
	UNIFORM LightColor LIGHTCOLOR
	
	UNIFORM sTexture TEXTURE0
	UNIFORM sLightMap TEXTURE1
	TEXTURE 0 marble
	TEXTURE 1 lantern

	VERTEXSHADER myProjectionVSh
	FRAGMENTSHADER myProjectionFSh
[/EFFECT]

[EFFECT]
	NAME FloorProjection

	ATTRIBUTE 	inVertex	POSITION
	ATTRIBUTE	inNormal	NORMAL
	ATTRIBUTE	inTexCoord	UV
	
	UNIFORM MVPMatrix WORLDVIEWPROJECTION
	UNIFORM ModelIT WORLDIT
	UNIFORM LightPosition LIGHTPOSWORLD
	UNIFORM LightColor LIGHTCOLOR
	
	UNIFORM sTexture TEXTURE0
	UNIFORM sLightMap TEXTURE1
	TEXTURE 0 floor
	TEXTURE 1 lantern

	VERTEXSHADER myProjectionVSh
	FRAGMENTSHADER myProjectionFSh
[/EFFECT]

[EFFECT]
	NAME Sphere

	ATTRIBUTE 	inVertex	POSITION
	ATTRIBUTE	inNormal	NORMAL
	
	UNIFORM MVPMatrix WORLDVIEWPROJECTION
	UNIFORM LightColor LIGHTCOLOR
	UNIFORM sLightMap TEXTURE0
	TEXTURE 0 lantern

	VERTEXSHADER SphereVertexShader
	FRAGMENTSHADER SphereFragmentShader
[/EFFECT]