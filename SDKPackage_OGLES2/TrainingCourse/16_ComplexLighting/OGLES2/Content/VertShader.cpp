// This file was created by Filewrap 1.1
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: VertShader.vsh ********

// File data
static const char _VertShader_vsh[] = 
	"/****************************************************************************\r\n"
	"* Vertex Shader\r\n"
	"* This code is for educational purposes, not optimized for performance.\r\n"
	"* For best performance, use different shaders for different light setups \r\n"
	"* and calculate lighting in model space.\r\n"
	"*\r\n"
	"* The use of several complex lights might significantly affect performance \r\n"
	"* on some mobile platforms.\r\n"
	"*\r\n"
	"* For fast transformation and lighting code, please see FastTnL example.\r\n"
	"*****************************************************************************/\r\n"
	"\r\n"
	"attribute highp vec3  inVertex; \r\n"
	"attribute highp vec3  inNormal;\r\n"
	"attribute highp vec2  inTexCoord;\r\n"
	"\r\n"
	"uniform highp mat4  MVPMatrix;\r\n"
	"uniform highp mat4  ModelView;\r\n"
	"uniform highp mat3  ModelViewIT;\r\n"
	"uniform lowp  int   iLightSel;\r\n"
	"uniform highp vec3  LightPosition;\r\n"
	"uniform highp vec3  LightDirection;\r\n"
	"uniform lowp  vec3  LightColor;\r\n"
	"\r\n"
	"varying mediump vec2  TexCoord;\r\n"
	"varying lowp    vec3  DiffuseLight;\r\n"
	"varying lowp    vec3  SpecularLight;\r\n"
	"\r\n"
	"const highp float  cShininess = 16.0;\r\n"
	"const highp float  cSpotCutoff = 0.9; \r\n"
	"const highp float  cSpotExp = 40.0;\r\n"
	"\r\n"
	"// General Blinn-Phong lighting function\r\n"
	"//\r\n"
	"// Calculated light is added to the varyings DiffuseLight and SpecularLight\r\n"
	"//\r\n"
	"void Lighting(bool bSpecular, highp vec3 normal, highp vec3 eyeDir, highp vec3 lightDir, lowp vec3 lightColor)\r\n"
	"{\r\n"
	"\tlowp float NdotL = max(dot(normal, lightDir), 0.0);\r\n"
	"\tDiffuseLight += NdotL * lightColor;\r\n"
	"\t\r\n"
	"\tif (bSpecular && NdotL > 0.0)\r\n"
	"\t{\r\n"
	"\t\thighp vec3 halfVector = normalize(lightDir + eyeDir);\r\n"
	"\t\thighp float NdotH = max(dot(normal, halfVector), 0.0);\t\t\r\n"
	"\t\thighp float specular = pow(NdotH, cShininess);\r\n"
	"\t\tSpecularLight += specular * lightColor;\r\n"
	"\t}\t\r\n"
	"}\r\n"
	"\r\n"
	"void DirectionalLight(bool bSpecular, highp vec3 normal, highp vec3 vertexPos)\r\n"
	"{\r\n"
	"\t// eye direction is the normalized inverse of the vertex position in eye space\r\n"
	"\thighp vec3 eyeDir = -normalize(vertexPos);\r\n"
	"\t\r\n"
	"\tLighting(bSpecular, normal, eyeDir, LightDirection, LightColor);\r\n"
	"}\r\n"
	"\r\n"
	"void PointLight(bool bSpecular, highp vec3 normal, highp vec3 vertexPos)\r\n"
	"{\r\n"
	"\t// calculate normalized light direction\r\n"
	"\thighp vec3 lightDir = -normalize(vertexPos - LightPosition);\r\n"
	"\t\r\n"
	"\t// eye direction is the normalized inverse of the vertex position in eye space\r\n"
	"\thighp vec3 eyeDir = -normalize(vertexPos);\r\n"
	"\t\r\n"
	"\tLighting(bSpecular, normal, eyeDir, lightDir, LightColor);\r\n"
	"}\r\n"
	"\r\n"
	"void SpotLight(bool bSpecular, highp vec3 normal, highp vec3 vertexPos)\r\n"
	"{\r\n"
	"\t// calculate normalized light direction\r\n"
	"\thighp vec3 lightDir = -normalize(vertexPos - LightPosition);\r\n"
	"\t\r\n"
	"\t// eye direction is the normalized inverse of the vertex position in eye space\r\n"
	"\thighp vec3 eyeDir = -normalize(vertexPos);\r\n"
	"\t\r\n"
	"\t// LightDirection is spot direction here\r\n"
	"\thighp float spotDot = dot(lightDir, LightDirection);\r\n"
	"\thighp float attenuation = 0.0;\r\n"
	"\tif (spotDot > cSpotCutoff)\r\n"
	"\t{\r\n"
	"\t\tattenuation = pow(spotDot, cSpotExp);\r\n"
	"\t}\r\n"
	"\t\r\n"
	"\tLighting(bSpecular, normal, eyeDir, lightDir, attenuation * LightColor);\r\n"
	"}\r\n"
	"\r\n"
	"void main()\r\n"
	"{\r\n"
	"\t// transform normal to eye space\r\n"
	"\thighp vec3 normal = normalize(ModelViewIT * inNormal);\r\n"
	"\t\r\n"
	"\t// transform vertex position to eye space\r\n"
	"\thighp vec3 ecPosition = vec3(ModelView * vec4(inVertex, 1.0));\r\n"
	"\t\r\n"
	"\t// initalize light intensity varyings\r\n"
	"\tDiffuseLight = vec3(0.0);\r\n"
	"\tSpecularLight = vec3(0.0);\r\n"
	"\t\r\n"
	"\t// select the light function\r\n"
	"\tif (iLightSel == 0)\t\t\tDirectionalLight(false, normal, ecPosition);\r\n"
	"\telse if (iLightSel == 1)\tDirectionalLight(true, normal, ecPosition);\r\n"
	"\telse if (iLightSel == 2)\tPointLight(false, normal, ecPosition);\r\n"
	"\telse if (iLightSel == 3)\tPointLight(true, normal, ecPosition);\r\n"
	"\telse if (iLightSel == 4)\tSpotLight(false, normal, ecPosition);\r\n"
	"\telse \t\t\t\t\t\tSpotLight(true, normal, ecPosition);\r\n"
	"\t\r\n"
	"\t// Transform position\r\n"
	"\tgl_Position = MVPMatrix * vec4(inVertex, 1.0);\r\n"
	"\t\r\n"
	"\t// Pass through texcoords\r\n"
	"\tTexCoord = inTexCoord;\r\n"
	"}";

// Register VertShader.vsh in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_VertShader_vsh("VertShader.vsh", _VertShader_vsh, 3859);

// ******** End: VertShader.vsh ********

